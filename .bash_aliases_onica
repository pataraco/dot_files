#!/usr/bin/env bash

# file: ~/.bash_aliases_onica - sourced by ~/.bashrc_aliases via $COMPANY_SHIT

# these are functions/aliases specific to Onica

# shellcheck disable=SC1090,SC2034,SC2139,SC2142,SC1117

CO_BA_FILE=".bash_aliases_$COMPANY"

# if interactive shell - display message
[ -n "$PS1" ] && echo -n "$CO_BA_FILE(ðŸŸ¢) "

# set up shell for Onica Single Sign-on (onica-sso)
[ "$(command -v onica-sso)" ] && eval "$(onica-sso shell-init bash)"

# -------------------- define functions --------------------

function rde {
   # runway: Set Deploy Environment
   local _env=$1
   if [ -n "$_env" ]; then
      case $_env in
         c) export DEPLOY_ENVIRONMENT="common";;
         d) export DEPLOY_ENVIRONMENT="dev";;
         s) export DEPLOY_ENVIRONMENT="staging";;
         p) export DEPLOY_ENVIRONMENT="prod";;
         P) export DEPLOY_ENVIRONMENT="production";;
         u) unset  DEPLOY_ENVIRONMENT;;
         *) export DEPLOY_ENVIRONMENT="$_env";;
      esac
   else
      echo "DEPLOY_ENVIRONMENT    = ${DEPLOY_ENVIRONMENT:-N/A}"
   fi
}

function showcof {
   # show a company specific function
   if [ -n "$COMPANY_SHIT" ]; then
      local _ALIASES_FILE=$COMPANY_SHIT
      if [[ $1 ]]; then
         if grep -q "^function $1 " "$_ALIASES_FILE"; then
            sed -n '/^function '"$1"' /,/^}/p' "$_ALIASES_FILE"
         else
            echo "function: '$1' - not found"
         fi
      else
         echo
         echo "which function do you want to see?"
         grep "^function .* " "$_ALIASES_FILE" | awk '{print $2}' | cut -d'(' -f1 |  awk -v c=4 'BEGIN{print "\n\t--- Functions (use \`scof\` to show details) ---"}{if(NR%c){printf "  %-18s",$1}else{printf "  %-18s\n",$1}}END{print CR}'
         echo -ne "enter function: "
         read -r func
         echo
         showcof "$func"
      fi
   else
      echo "company alias file not set (COMPANY_SHIT)"
   fi
}

function sso-login { 
   # sso-login override until it gets updated to return correct return codes
   _exports=$(onica-sso login "$@" 2>/dev/null)
   local _retcode=$?
   if [ $_retcode -eq 0 ]; then
       eval "$_exports"
       sso-title "$1"
   else
       echo "$_exports"
   fi
   unset _exports
   return $_retcode
}

function ssol {
   # wrapper for `sso-login`
   # usage: ssol ACCT_ABBRVTN|ACCT_SHORT_NAME [MFA_CODE]
   local _acct_short_name
   local _acct_long_name
   local _accnt_abbrvtn=$1
   local _mfa_code=$2
   if [ -n "$_accnt_abbrvtn" ]; then
      case $_accnt_abbrvtn in
         dfd) _acct_short_name="onica-drfirst-dev "      ;;
         ddo) _acct_short_name="onica-drfirst-old-dev "  ;;
         dfm) _acct_short_name="onica-drfirst-master "   ;;
         dfp) _acct_short_name="onica-drfirst-prod "     ;;
         dpo) _acct_short_name="onica-drfirst-prod-old " ;;
         dfs) _acct_short_name="onica-drfirst-stage "    ;;
         sil) _acct_short_name="sturdy-internal-lab "    ;;
         sss) _acct_short_name="sturdy-sentientscience " ;;
         unset) 
            unset ONICA_SSO_ACCOUNT_TAGS
            unset ONICA_SSO_ACCOUNT_NAME
            unset ONICA_SSO_EXPIRES_TS
            unset ONICA_SSO_ACCOUNT_ID
            unset ONICA_SSO_ACCOUNT_KEY
            unset ONICA_SSO_EXPIRES_ISO
            unset AWS_ENVIRONMENT
            unset AWS_ACCESS_KEY_ID
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SESSION_TOKEN
            PS_PROJ="$PNRM"
            echo "environment has been unset"
            return                                      ;;
         *) _acct_short_name=$_accnt_abbrvtn            ;;
      esac
      #local _acct_long_name=$(sso-list | grep "^$_acct_short_name " | cut -d ' ' -f3-)
      _acct_long_name=$(sso-list | grep -i "$_acct_short_name" | cut -d ' ' -f3-)
      if [ -n "$_acct_long_name" ]; then
         local _number_matching
         _number_matching=$(echo "$_acct_long_name" | wc -l | tr -d ' ')
         if [ "$_number_matching" -gt 1 ]; then
            echo "more than 1 matching result - please be more specific:"
            sso-list | grep -i "$_acct_short_name"
            return
         fi
         _acct_short_name=$(sso-list | grep -i "$_acct_short_name" | cut -d ' ' -f1)
         if sso-login "$_acct_short_name" "$_mfa_code"; then
            local _aws_env=$ONICA_SSO_ACCOUNT_NAME
            #local _aws_acct=$(aws sts get-caller-identity | jq -r .Account)
            local _aws_acct=$ONICA_SSO_ACCOUNT_ID
            export AWS_ENVIRONMENT="$_aws_env [$_aws_acct]"
            PS_PROJ="${PRED}[$ONICA_SSO_ACCOUNT_KEY]${PNRM}"
            echo -e "environment set to:\n$AWS_ENVIRONMENT ($_acct_short_name)"
         else
            echo -e "environment could not be set"
         fi
      else
         echo "can't find account with short name: $_acct_short_name"
      fi
   else
      echo -n "--- AWS Environment "
      [ -n "$AWS_ENVIRONMENT" ] && echo "($ONICA_SSO_ACCOUNT_KEY) Settings ---" || echo "(NOT set) ---"
      echo "AWS_ENVIRONMENT       = ${AWS_ENVIRONMENT:-N/A}"
      echo "AWS_ACCESS_KEY_ID     = ${AWS_ACCESS_KEY_ID:-N/A}"
      echo "AWS_SECRET_ACCESS_KEY = ${AWS_SECRET_ACCESS_KEY:-N/A}"
      echo "AWS_DEFAULT_REGION    = ${AWS_DEFAULT_REGION:-N/A}"
   fi
}

# -------------------- define aliases --------------------

# company common
alias cof="grep '^function .* ' ~/$CO_BA_FILE | awk '{print $2}' | cut -d'(' -f1 | sort | awk -v c=4 'BEGIN{print \"\n\t--- Functions (use \`scof\` to show details) ---\"}{if(NR%c){printf \"  %-18s\",\$2}else{printf \"  %-18s\n\",\$2}}END{print CR}'"
alias scoba='source ~/$CO_BA_FILE'
alias scof=showcof
alias vcoba='[ -f $COMPANY_SHIT ] && { echo "editing: $COMPANY_SHIT"; vi $COMPANY_SHIT; sba; }'
# company specific
alias actss="source $HOME/envs/sentient-science/bin/activate"
alias cd-a="cd $HOME/repos/projects/aecom"
alias cd-bd="cd $HOME/repos/projects/baxter/dclink"
alias cd-drf="cd $HOME/repos/projects/drfirst/drfirst/stacker"
alias cd-h="cd $HOME/repos/projects/heuristics/onica-heuristics"
alias cd-io="cd $HOME/repos/projects/infogix/infogix-onica"
alias cd-ods="cd $HOME/repos/projects/ormco/sturdy-ormco-devops/stacker/ods"
alias cd-odsc="cd $HOME/repos/projects/ormco/ormco-ods-code"
alias cd-sli="cd $HOME/repos/Onica/sturdy-lab-infrastructure"
alias cd-spi="cd $HOME/repos/Onica/sturdy-platform-infrastructure"
alias cd-ss="cd $HOME/repos/projects/sentient-science/onica-sentient-science"
alias ssoc="sso-console"
alias ssor="sso-relogin"
alias ssocnb="sso-console --no-browser >& /dev/null"

[ -n "$PS1" ] && echo -n "$CO_BA_FILE(ðŸ›‘) "
