#!/usr/bin/env bash

# file: ~/.bash_aliases_ag - sourced by ~/.bashrc_aliases via $COMPANY_SHIT

# these are functions/aliases specific to AG

# shellcheck disable=SC1090,SC2034,SC2139,SC2142,SC1117

CO_BA_FILE=".bash_aliases_$COMPANY"

# if interactive shell - display message
[ -n "$PS1" ] && echo -n "$CO_BA_FILE(ðŸŸ¢) "

# -------------------- define functions --------------------

function saem {
# set AWS environment variables with MFA (aws-mfa)
# (https://github.com/lonelyplanet/aws-mfa)
# here's a Python version: https://github.com/broamski/aws-mfa

   local _mfa_exp_time
   local _mfa_exp_ts
   local _exit_code
   local _arg=$1
   local _code=$2
   local _AWS_STS_CREDS=$HOME/.aws/${_arg}_mfa_credentials
   aws sts get-caller-identity > /dev/null 2>&1
   _exit_code=$?
   [ $_exit_code -ne 0 ] && sae unset > /dev/null
   sae "$_arg" > /dev/null
   if [ -n "$_arg" ]; then
      if [ "$_arg" == "unset" ]; then
         echo "environment has been unset"
      else
         [ ! -s "$_AWS_STS_CREDS" ] && rm -f "$_AWS_STS_CREDS"
         if [ -n "$_code" ]; then
            source "$HOME/repos/pataraco/scripts/aws/aws_sts_mfa.sh"
            _exit_code=$?
         elif [ -n "$AWS_STS_EXPIRES_TS" ] || [ -s "$_AWS_STS_CREDS" ]; then
            local _now_ts
            _now_ts=$(date +%s)
            _mfa_exp_time=$(jq -r .Credentials.Expiration "$_AWS_STS_CREDS")
            # _mfa_exp_ts=$(date -jf "%Y-%m-%dT%H:%M:%SZ" $_mfa_exp_time +"%s")
            _mfa_exp_ts=$(date -jf "%Y-%m-%dT%H:%M:%S" "${_mfa_exp_time%+*}" +"%s")
            # if [ $_mfa_exp_ts -lt $_now_ts ]; then
            # echo "debug: AWS_STS_EXPIRES_TS: $AWS_STS_EXPIRES_TS"
            [ -z "$AWS_STS_EXPIRES_TS" ] && AWS_STS_EXPIRES_TS=0
            # echo "debug: AWS_STS_EXPIRES_TS: $AWS_STS_EXPIRES_TS, _now_ts: $_now_ts, _mfa_exp_ts: $_mfa_exp_ts, AWS_SESSION_TOKEN: $AWS_SESSION_TOKEN"
            if [ $AWS_STS_EXPIRES_TS -lt "$_now_ts" ] || [ "$_mfa_exp_ts" -lt "$_now_ts" ]; then
               # echo -en "Enter the 6-digit code from your MFA device: "
               source ~/repos/pataraco/scripts/aws/aws_sts_mfa.sh
               _exit_code=$?
            ## elif [ $AWS_STS_EXPIRES_TS -gt $_now_ts -a -z "$AWS_SESSION_TOKEN" ]; then
            ##    echo -en "Enter the 6-digit code from your MFA device: "
            ## elif [ $_mfa_exp_ts -gt $_now_ts -a -z "$AWS_SESSION_TOKEN" ]; then
            ##    echo -en "Enter the 6-digit code from your MFA device: "
            fi
         elif [ -z "$AWS_SESSION_TOKEN" ]; then
            # echo -en "Enter the 6-digit code from your MFA device: "
            source ~/repos/pataraco/scripts/aws/aws_sts_mfa.sh
            _exit_code=$?
         #else
         #   echo -en "Enter the 6-digit code from your MFA device: "
         fi
         #local _aws_mfa_results
         #_aws_mfa_results=$(aws-mfa --profile $_arg 2>&1)
         #_exit_code=$?
         # echo "debug: got this results ($_exit_code):"
         # echo "debug: $_aws_mfa_results"
         # local _aws_mfa_results_cleaned=$(echo $_aws_mfa_results | sed 's/Fetching.*\.\.\. *//;s/Using MFA device .*mfa_device\. *//;s/Enter .* MFA device: *//;s/An error .* code\. *//')
         # echo "debug: really want to 'eval' this:"
         # echo "debug: $_aws_mfa_results_cleaned"
         if [ $_exit_code -eq 0 ]; then
            # eval "$_aws_mfa_results_cleaned"
            _mfa_exp_time=$(jq -r .Credentials.Expiration "$_AWS_STS_CREDS")
            # _mfa_exp_ts=$(date -jf "%Y-%m-%dT%H:%M:%SZ" $_mfa_exp_time +"%s")
            # export AWS_STS_EXPIRES_TS=$_mfa_exp_ts
            # export AWS_STS_EXPIRES_TS=$(date -jf "%Y-%m-%dT%H:%M:%SZ" $_mfa_exp_time +"%s")
            export AWS_STS_EXPIRES_TS
            AWS_STS_EXPIRES_TS=$(date -jf "%Y-%m-%dT%H:%M:%S" "${_mfa_exp_time%+*}" +"%s")
            export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN
            echo "environment has been set to --> $AWS_ENVIRONMENT ($_arg)"
            echo "MFA has been enabled for environment"
         else
            # echo "$_aws_mfa_results_cleaned"
            echo "environment could NOT set to --> $AWS_ENVIRONMENT ($_arg)"
            echo "MFA could NOT be enabled for environment"
            unset AWS_ACCESS_KEY_ID
            unset AWS_DEFAULT_PROFILE
            unset AWS_DEFAULT_REGION
            unset AWS_ENVIRONMENT
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SECURITY_TOKEN
            unset AWS_SESSION_TOKEN
            unset AWS_STS_EXPIRES_TS
            PS_COL="$PNRM"; PS_AWS="$PNRM"
         fi
      fi
   else
      echo -n "--- AWS Environment "
      [ -n "$AWS_DEFAULT_PROFILE" ] || { [ -n "$AWS_ACCESS_KEY_ID" ] && [ -n "$AWS_SECRET_ACCESS_KEY" ]; } && echo "Settings ---" || echo "(NOT set) ---"
      echo "AWS_ENVIRONMENT       = ${AWS_ENVIRONMENT:-N/A}"
      echo "AWS_DEFAULT_PROFILE   = ${AWS_DEFAULT_PROFILE:-N/A}"
      # obfuscate the KEYs with some *'s
      echo "AWS_ACCESS_KEY_ID     = ${AWS_ACCESS_KEY_ID:-N/A}" | sed 's:[F-HO-QT-V3-8]:*:g'
      echo "AWS_SECRET_ACCESS_KEY = ${AWS_SECRET_ACCESS_KEY:-N/A}" | sed 's:[d-np-zF-HO-QU-V4-9+]:*:g'
      echo "AWS_SESSION_TOKEN     = ${AWS_SESSION_TOKEN:-N/A}" | sed 's:[d-np-zF-HP-QU-V4-8+]:*:g' | cut -c1-79
      echo "AWS_DEFAULT_REGION    = ${AWS_DEFAULT_REGION:-N/A}"
   fi
}

function showcof {
   # show a company specific function
   ALIASES_FILE="$HOME/$CO_BA_FILE"
   if [[ $1 ]]; then
      if grep -q "^function $1 " "$ALIASES_FILE"; then
         sed -n '/^function '"$1"' /,/^}/p' "$ALIASES_FILE"
      else
         echo "function: '$1' - not found"
      fi
   else
      local _func
      echo
      echo "which function do you want to see?"
      grep "^function .* " "$ALIASES_FILE" | awk '{print $2}' | cut -d'(' -f1 |  awk -v c=4 'BEGIN{print "\n\t--- Functions (use \`scof\` to show details) ---"}{if(NR%c){printf "  %-18s",$1}else{printf "  %-18s\n",$1}}END{print CR}'
      echo -ne "enter function: "
      read -r _func
      echo
      showcof "$_func"
   fi
}

# -------------------- define aliases --------------------

alias cof="grep '^function .* ' ~/$CO_BA_FILE | awk '{print $2}' | cut -d'(' -f1 | sort | awk -v c=4 'BEGIN{print \"\n\t--- Functions (use \`scof\` to show details) ---\"}{if(NR%c){printf \"  %-18s\",\$2}else{printf \"  %-18s\n\",\$2}}END{print CR}'"
alias scoba='source $COMPANY_SHIT'
alias scof=showcof
alias vcoba='[ -f $COMPANY_SHIT ] && { echo "editing: $COMPANY_SHIT"; vi $COMPANY_SHIT; sba; }'
alias vi-wpn="vi ~/Documents/projects/wordpress/wordpress-project-notes.txt"
alias vl='export VAULT_ADDR=$(cat ~/.ssh/ag_vault_address); vault login -method=github token=$(cat ~/.ssh/github_ag_access_token)'

[ -n "$PS1" ] && echo -n "$CO_BA_FILE(ðŸ›‘) "
