[color]
	ui = auto
[alias]
	a = config --get-regexp '^alias\\.'
	as = "!git config -l | grep ^alias\\. | cut -c 7- | sort"
	b = branch  # show branch info
	ba = branch -a
	bm = branch --merged
	bn = branch --no-merged
	bv = branch -vv
	ca = commit --amend
	cam = commit -am
	caa = commit -a --amend
	# cfb = create feature branch
	cfb = "!git checkout master && \
		git fetch --prune origin master && \
		git merge origin/master && \
		git checkout -b"
	fmdev = "!git checkout dev && git fetch --prune origin && git merge origin/dev"
	fmqa = "!git checkout qa && git fetch --prune origin && git merge origin/qa"
	fmprod = "!git checkout prod && git fetch --prune origin && git merge origin/prod"
	fmd = "!git checkout develop && git fetch --prune origin && git merge origin/develop"
	fmdt = "!git checkout develop && git fetch --tags --prune origin --force && git merge origin/develop"
	# fmm: fetch & merge master; do this instead of `git pull`
	fmmstr = "!git checkout master && git fetch --prune origin && git merge origin/master"
	fmm = "!git checkout main && git fetch --prune origin && git merge origin/main"
	fmr = "!git checkout release && git fetch --prune origin && git merge origin/release"
	fms = "!git checkout stage && git fetch --prune origin && git merge origin/stage"
	fmu = "!git checkout master && git fetch --prune upstream && git merge upstream/master"
	fmx = "!git fetch --prune origin && git merge origin/$(git symbolic-ref HEAD|cut -d/ -f3-)"
	#cm = "!git add -A && git commit -m"
	cm = commit -m
	co = checkout
	cob = checkout -b
	d = diff
	dc = diff --cached
	ds = diff --staged
	dt = difftool
	# delete merged branches
	dmb = "!f() { git branch --merged ${1-master} | grep -v \" ${1-master}$\" | xargs -r git branch -d; }; f"
	egc = config --global -e
	elc = config --local -e
	esc = config --system -e
	mt = mergetool
	# git push origin $CURRENT_BRANCH
	po = "!git push origin $(git symbolic-ref HEAD|cut -d/ -f3-)"
	s = status
	ss = status -s
	# temporarily save work
	save = "!git add -A && git commit -m 'SAVEPOINT'"
	sl = "shortlog -s -n --all --no-merges"
	wip = "!git commit -am 'WIP'"
	# continue work
	undo = reset HEAD~1 --mixed
	unstage = reset HEAD --
	# commit and blow away changes
	wipe = "!git add -A && git commit -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard"
	# log stuff
	la = log --oneline --decorate --all
	lag = log --oneline --decorate --all --graph
	ld = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=relative
	lds = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	le = log --oneline --decorate
	# lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%cn>' --abbrev-commit --date=relative
	lg = log --graph --pretty=format:'%C(bold)%Cred%h%C(yellow)%d%Creset%C(bold) %s %Cgreen(%cr) %C(blue)<%cn>' --abbrev-commit --date=relative
	lga = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%cn>' --abbrev-commit --date=relative --all
	# ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat
	ll = log --pretty=format:'%Cred%h%C(yellow)%d %Creset%s %Cgreen(%cr) %C(bold blue)<%cn>%C(cyan)' --numstat --abbrev-commit --date=relative
	lla = log --pretty=format:'%Cred%h%C(yellow)%d %Creset%s %Cgreen(%cr) %C(bold blue)<%cn>%C(cyan)' --numstat --all --abbrev-commit --date=relative
	lnc = log --pretty=format:"%h\\ %s\\ [%cn]"
	lp = log -p # show patch/updates
	# ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate
	# ls = log --pretty=format:'%C(bold)%Cred%h%C(yellow)%d %Creset%C(bold)%s %Cgreen(%cr) %C(bold blue)<%cn>' --abbrev-commit --date=relative
	ls = "!git lsa -12"  # show last 5 commits
	lsa = log --pretty=format:'%C(bold)%Cred%h%C(yellow)%d %Creset%C(bold)%s %Cgreen(%cr) %C(bold blue)<%cn>' --abbrev-commit --date=relative
	# lss = "!git ls -S"  # search logs for PATTERN"
	# lsf = "!git ls --"  # show logs for files (and directories)
	lss = "!git lsa -S"  # search logs for PATTERN"
	lsf = "!git lsa --"  # show logs for files (and directories)
	# lsl = "!git ls -5"  # show last 5 commits
	lsa = log --pretty=format:'%Cred%h%C(yellow)%d %Creset%s %Cgreen(%cr) %C(bold blue)<%cn>' --all --abbrev-commit --date=relative
	rso = remote show origin

	# misc stuff
	dr  = "!f() { git diff "$1"^.."$1"; }; f"
	lc  = "!f() { git ll "$1"^.."$1"; }; f"
	diffr  = "!f() { git diff "$1"^.."$1"; }; f"
	f = "!git ls-files | grep -i"
	grep = grep -Ii
	gr = grep -Ii
	gra = "!f() { A=$(pwd) && TOPLEVEL=$(git rev-parse --show-toplevel) && cd $TOPLEVEL && git grep --full-name -In $1 | xargs -I{} echo $TOPLEVEL/{} && cd $A; }; f"
	done = "!f() { git branch | grep "$1" | cut -c 3- | grep -v done | xargs -I{} git branch -m {} done-{}; }; f"
	taginfo = "!f() { for _tag in $(git tag|sort -V|tail -${1:-10}); do _date=$(git log -1 --format=%ai $_tag | awk '{print $1}'); _msg=$(git tag -n $_tag | cat | awk '{a=match($0, $2); print substr($0,a)}'); echo \"$_tag | $_date | $_msg\"; done; }; f"
	so = show --oneline -s
	# not sure about "up"
	# up = !git pull --rebase --prune $@ && git submodule update --init --recursive
	# bdone = "!f() { git checkout ${1-master} && git up && git bclean ${1-master}; }; f"
[core]
	excludesfile = /home/praco/.gitignore
[user]
	name = Patrick Raco
	email = patrick.raco@autodesk.com
# [credential]
# 	helper = !aws --profile rdrake --region us-east-1 codecommit credential-helper $@
# 	UseHttpPath = true
# [credential "https://github.com/pataraco"]
#         username = pataraco
# 	helper = cache --timeout=604800
# 	UseHttpPath = false
# [credential "https://github.com/patrickraco"]
#         username = patrickraco
# 	helper = cache --timeout=604800
# 	UseHttpPath = false
[credential]
	helper = cache --timeout=604800
	UseHttpPath = false
# [credential "https://git-codecommit.us-west-2.amazonaws.com"]
[credential]
	helper = !aws codecommit credential-helper $@
	UseHttpPath = true
[diff]
	tool = vimdiff
	# tool = p4merge
[difftool]
	prompt = false
[difftool "vimdiff"]
[difftool "p4merge"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE
[merge]
	tool = vimdiff
	# tool = p4merge
[mergetool]
	prompt = false
	keepBackup = false
	keepTemporaries = false
	trustExitCode = false
[mergetool "p4merge"]
	cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$LOCAL $PWD/$REMOTE $PWD/$MERGED
[mergetool "vimdiff"]
	conflictstyle = diff3
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
