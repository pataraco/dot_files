


aws acm describe-certificate --region REGION --certificate-arn ARN
aws acm import-certificate --certificate file://WWW.pem.crt --private-key file://WWW.pem.key --certificate-chain file://WWW.chain.pem.crt
aws acm list-certificates --region REGION
aws acm request-certificate --region REGION --domain-name HOST.DOMAIN --domain-validation-options DomainName=HOST.DOMAIN,ValidationDomain=DOMAIN
aws acm resend-validation-email --region REGION --certificate-arn ARN --domain HOST.DOMAIN --validation-domain DOMAIN
aws apigateway create-base-path-mapping --rest-api-id ID --domain-name DOMAIN --stage STAGE --base-path PATH
aws apigatewayv2 create-api-mapping --api-id ID --domain-name DOMAIN --stage STAGE --api-mapping-key PATH
aws autoscaling create-auto-scaling-group --auto-scaling-group-name ASG_NAME --launch-configuration-name LC_NAME --min-size MIN --max-size MAX --desired-capacity DESIRED --availability-zones AZ1 AZ2 --tags ResourceId=ASG_NAME,ResourceType=auto-scaling-group,Key=KEY,Value=VAL,PropagateAtLaunch=true|false
aws autoscaling create-launch-configuration --launch-configuration-name LC_NAME --image-id AMI --key-name KEY_PAIR --security-groups SG --user-data file://PATH_TO/FILE --instance-type TYPE --iam-instance-profile PROFILE
aws autoscaling delete-auto-scaling-group --auto-scaling-group-name ASG_NAME --force-delete
aws autoscaling delete-launch-configuration --launch-configuration-name LC_NAME
aws autoscaling update-auto-scaling-group --auto-scaling-group-name ASG_NAME --min-size MIN --max-size MAX --desired-capacity DESIRED
aws cloudformation create-stack --stack-name CF_STACK_NAME --capabilities CAPABILITY_NAMED_IAM --template-body file://PATH_TO/CF_STACK_TEMPLATE --disable-rollback --notification-arns NOTIFICATION_ARN --tags Key=Name,Value=CF_STACK_NAME
aws cloudformation delete-stack --stack-name CF_STACK_NAME
aws cloudformation deploy --template-file TEMPLATE.yaml --stack-name STACK_NAME --capabilities CAPABILITY_IAM
aws cloudformation describe-stacks --stack-name CF_STACK_NAME
aws cloudformation get-template --stack-name STACK_NAME | jq -r .TemplateBody
aws cloudformation list-stacks | jq .StackSummaries[].StackName
aws cloudformation package --template-file TEMPLATE.yaml --output-template-file SAM_TEMPLATE.yaml --s3-bucket BUCKET --s3-prefix KEY
aws cloudformation update-stack --stack-name CF_STACK_NAME --capabilities CAPABILITY_NAMED_IAM --template-body file://PATH_TO/CF_STACK_TEMPLATE
aws cloudformation wait stack-create-complete --stack-name CF_STACK_NAME
aws codebuild list-builds-for-project --project-name PROJECT_NAME --sort-order DESCENDING --max-items 1 --output text | grep IDS | cut -d':' -f2  # get latest build ID
aws codecommit create-repository --region REGION --repository-name REPO_NAME --repository-description "REPO DESCRIPTION"
aws codecommit get-repository --repository-name REPO_NAME
aws codecommit list-repositories --region REGION
aws codepipeline delete-webhook --name WEBHOOK_NAME
aws codepipeline deregister-webhook-with-third-party --webhook-name WEBHOOK_NAME
aws codepipeline get-pipeline --name PIPELINE_NAME
aws codepipeline get-pipeline-state --name PIPELINE_NAME
aws codepipeline list-pipelines
aws codepipeline list-webhooks
aws codepipeline put-approval-result --pipeline-name PIPELINE_NAME --stage-name STAGE_NAME --action-name ACTION_NAME --token STATE_TOKEN --result summary='SUMMARY',status='Approved|Rejected'
aws codepipeline put-webhook --cli-input-json file://path/to/webhook_config.json
aws codepipeline register-webhook-with-third-party --webhook-name WEBHOOK_NAME
aws deploy create-application --application-name APP_NAME
aws deploy create-deployment --application-name APP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name DEPLOY_GRP_NAME --s3-location bucket=BUCKET,key=KEY,bundleType=zip
aws deploy create-deployment-group --application-name APP_NAME --auto-scaling-groups ASG_NAME --deployment-group-name DEPLOY_GRP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --service-role-arn ARN
aws deploy create-deployment-group --application-name APP_NAME --deployment-group-name DEPLOY_GRP_NAME --deployment-config-name CodeDeployDefault.OneAtATime --ec2-tag-filters Key=Name,Value=NAME,Type=KEY_AND_VALUE --service-role-arn ARN
aws deploy delete-application --application-name APP_NAME
aws deploy get-deployment --deployment-id ID
aws deploy list-deployemtns --application-name APP_NAME
aws deploy push --application-name APP_NAME --s3-location s3://BUCKET_NAME/PATH_TO/APP.zip --ignore-hidden-files
aws ds describe-domain-controllers --directory-id $DIR_ID
aws dynamodb delete-item --region REGION --table TABLE --key '{"KEY_NAME": {"ITEM_TYPE": "ITEM_NAME"}}'
aws dynamodb get-item --region REGION --table TABLE --key '{"KEY_NAME": {"ITEM_TYPE": "ITEM_NAME"}}'
aws dynamodb list-tables
aws ec2 allocate-address
aws ec2 associate-address --instance-id INST_ID
aws ec2 authorize-security-group-ingress --group-name SG_NAME --from-port FROM_PORT --to-port TO_PORT --ip-protocol tcp --cidr-ip CIDR
aws ec2 create-key-pair --key-name KEY_PAIR_NAME | jq -r .KeyMaterial > PRIVATE_KEY
aws ec2 create-security-group --group-name SG_NAME --description "SG DESCRIPTION"
aws ec2 create-tags --region REGION --resources INST_ID --tags Key=KEY,Value=VALUE Key=KEY2,Value=VALUE2
aws ec2 delete-key-pair --key-name KEY_PAIR_NAME
aws ec2 delete-key-pair [--region REGION] --key-name KEY_PAIR_NAME
aws ec2 describe-addresses --output table
aws ec2 describe-availability-zones
aws ec2 describe-images --owners amazon --filters "Name=name,Values=*2012*English*SQL*2012*_Standard*" --query 'sort_by(Images, &CreationDate)[].[Name, CreationDate, ImageId]' --output table
aws ec2 describe-images --owners amazon --filters "Name=name,Values=*amazon-eks*1.16*2020*" --query 'sort_by(Images, &CreationDate)[].[Name, CreationDate, ImageId]' --output table
aws ec2 describe-instance-status --region REGION --instance-id INST_ID
aws ec2 describe-instance-status --region REGION --instance-id INST_ID | jq .InstanceStatuses[].Events
aws ec2 describe-instances --filters Name=tag:Name,Values=INST_NAME Name=instance-state-name,Values=running
aws ec2 describe-instances --filters Name=tag:Name,Values=INST_NAME Name=instance-state-name,Values=running | jq -r .Reservations[].Instances[].InstanceId
aws ec2 describe-instances --filters Name=tag:Name,Values=INST_NAME Name=instance-state-name,Values=running | jq -r .Reservations[].Instances[].PublicIpAddress
aws ec2 describe-instances --region REGION --filters "Name=instance-state-name,Values=running" --query "Reservations[].Instances[].[Tags[?Key=='Name'].Value|[0],PrivateIpAddress,PublicIpAddress,State.Name]" --output table
aws ec2 describe-instances --region REGION --filters "Name=tag:KEY,Values=VAL" --query "Reservations[].Instances[].[Tags[?Key=='KEY0'].Value|[0],PrivateIpAddress,InstanceId,State.Name,SecurityGroups[].GroupId|join(', ',@)]" --output table
aws ec2 describe-instances --region REGION --filters "Name=tag:KEY,Values=VAL" --query "Reservations[].Instances[].[Tags[?Key=='KEY0'].Value|[0],PrivateIpAddress,InstanceId,Tags[?Key=='KEY1'].Value|[0],Tags[?Key=='KEY2'].Value|[0],State.Name]" --output table
aws ec2 describe-instances --region REGION --filters "Name=tag:KEY,Values=VAL" --query "Reservations[].Instances[].[Tags[?Key=='KEY0'].Value|[0],PrivateIpAddress,InstanceId,Tags[?Key=='KEY1'].Value|[0],Tags[?Key=='KEY2'].Value|[0],State.Name]" --output table
aws ec2 describe-instances --region REGION --filters 'Name=tag:Project,Values=vzfl' --query "Reservations[].Instances[].[Tags[?Key=='Name'].Value|[0],PrivateIpAddress,InstanceId,State.Name]" --output table
aws ec2 describe-instances --region REGION --instance-ids INST_ID --query "Reservations[].Instances[].[Tags[?Key=='KEY'].Value|[0]]|[0]"
aws ec2 describe-key-pairs --key-name KEY_PAIR_NAME
aws ec2 describe-security-groups --region REGION --filters "Name=tag:Name,Values=*internet*,*grp-default*,*elk*,*elasticsearch*,*redis*,*mongodb*,*gunicorn*" --query "SecurityGroups[].[GroupName,GroupId]" --output table
aws ec2 describe-security-groups --region REGION --filters "Name=tag:Name,Values=sec-grp*" --query "SecurityGroups[].[GroupName,GroupId]" --output table
aws ec2 describe-vpc-peering-connections --query "VpcPeeringConnections[].[Tags[?Key=='Name'].Value|[0],RequesterVpcInfo.CidrBlock,AccepterVpcInfo.CidrBlock,VpcPeeringConnectionId,Status.Code]" --output table
aws ec2 disassociate-address --public-ip PUBLIC_IP
aws ec2 get-password-data --instance-id INST_ID --priv-launch-key PEM_FILE
aws ec2 import-key-pair [--region REGION] --key-name KEY_PAIR_NAME --public-key-material file://path/to/FILE.pub
aws ec2 modify-instance-attribute --instance-id INST_ID --disable-api-termination
aws ec2 modify-instance-attribute --instance-id INST_ID --no-disable-api-termination
aws ec2 modify-instance-attribute --region REGION --instance-id INST_ID --groups SG_UID
aws ec2 release-address --public-ip PUBLIC_IP
aws ec2 run-instances --image-id AMI --key-name KEY_PAIR_NAME --user-data file://PATH_TO/USER_DATA_FILE --count COUNT --instance-type TYPE --iam-instance-profile Name=IAM_PROFILE --security-groups SG1 [SG2...]
aws ec2 start-instances --region REGION --instance-ids ID1 [ID2...]
aws ec2 stop-instances --region REGION --instance-ids ID1 [ID2...]
aws ec2 terminate-instances --region REGION --instance-ids ID1 [ID2...]
aws ecr describe-images --repository-name REPO --region REGION
aws ecr describe-repositories --region REGION
aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCT.dkr.ecr.$REGION.amazonaws.com  # aws (v2.0.10)
aws ecr get-login-password | docker login --username AWS --password-stdin AWS_ACCT.dkr.ecr.us-west-2.amazonaws.com/REPO
aws eks update-kubeconfig --name EKS_CLUSTER_NAME [--kubeconfig /path/to/KUBE_CFG]
aws elasticbeanstalk list-available-solution-stacks
aws elb describe-load-balancers --load-balancer-name ELB_NAME | jq -r .LoadBalancerDescriptions[].DNSName # get ELB DNS
aws elb describe-load-balancers --region REGION [--load-balancer-names ELB_NAMES] --query "LoadBalancerDescriptions[].[LoadBalancerName,Instances[].InstanceId|join(', ',@)]" --output table
aws elb set-load-balancer-listener-ssl-certificate --load-balancer-name LB_NAME --load-balancer-port PROT --ssl-certificate-id CERT_ARN
aws iam add-role-to-instance-profile --instance-profile-name INST_PROFILE_NAME --role-name ROLE_NAME
aws iam add-user-to-group --group-name GROUP_NAME --user-name USER_NAME
aws iam attach-group-policy --group-name GROUP_NAME --policy-arn POLICY_ARN
aws iam attach-role-policy --role-name ROLE_NAME --policy-arn POLICY_ARN
aws iam create-access-key --user-name USER_NAME
aws iam create-group --group-name GROUP_NAME   # e.g. CodeCommit_repo_infostretch
aws iam create-instance-profile --instance-profile-name INST_PROFILE_NAME
aws iam create-policy --policy-name POLICY_NAME --policy-document file://PATH_TO/FILE_NAME.json
aws iam create-role --role-name ROLE_NAME --assume-role-policy-document file://PATH_TO/POLICY_DOC.json
aws iam create-user --user-name USER_NAME
aws iam get-group --group-name GROUP_NAME | grep USER_NAME	# search for specific user
aws iam get-group --group-name GROUP_NAME | grep UserName	# get all users
aws iam get-role --role-name ROLE_NAME --query Role.Arn --output text
aws iam list-access-keys --user-name USER_NAME
aws iam list-attached-group-policies --group-name GROUP_NAME
aws iam list-group-policies --group-name GROUP_NAME
aws iam list-groups
aws iam list-groups-for-user --user-name USER_NAME		# list all groups user is in
aws iam list-policies
aws iam list-roles --path-prefix /aws-reserved/sso.amazonaws.com --query Roles[].Arn | grep AWSReservedSSO_AWSAdministratorAccess
aws iam list-ssh-public-keys
aws iam list-users --query Users[*].[UserName,UserId] --output table
aws iam put-role-policy --role-name ROLE_NAME --policy-name POLICY_NAME --policy-document file://PATH_TO/POLICY_DOC.json
aws iam update-login-profile --user-name USER_NAME --password PASSWORD --password-reset-required
aws kms list-aliases --query "Aliases[?AliasName=='alias/ALIAS_NAME'].AliasArn" --output text
aws lambda get-function --function-name NAME --query Configuration.Environment.Variables --output table
aws lambda invoke --function-name FUNCTION_NAME --payload fileb://payload.json /tmp/OUTPUT.log
aws lambda update-alias --function-name FUNCTION_NAME --name ALIAS_NAME [--function-version VERSION_NUMBER]
aws lambda update-function-code --function-name FUNCTION_NAME --s3-bucket S3_BUCKET --s3-key S3_KEY --publish
aws lambda update-function-configuration --function-name FUNCTION_NAME --timeout N --memory-size M
aws logs delete-log-group --log-group-name NAME
aws logs describe-log-groups --query "logGroups[?starts_with(logGroupName,'/aws/api-gateway')].logGroupName" --output text
aws rds describe-db-engine-versions --filter "Name=engine,Values=ENGINE" --query DBEngineVersions[].[Engine,EngineVersion] --output table
aws rds describe-db-engine-versions --query DBEngineVersions[].[Engine,EngineVersion] --output table
aws resourcegroupstaggingapi tag-resources --resource-arn-list $ARNs --tags $TAG_KEY=$TAG_VAL
aws route53 create-vpc-association-authorization --hosted-zone-id $HOSTED_ZONE_ID --vpc VPCRegion=$REGION,VPCId=$VPC_ID
aws route53 delete-vpc-association-authorization --hosted-zone-id $HOSTED_ZONE_ID --vpc VPCRegion=$REGION,VPCId=$VPC_ID
aws route53 get-hosted-zone --id $HOSTED_ZONE_ID
aws route53 list-hosted-zones --query "HostedZones[?Name==example.com.].[Name,Id,Config.PrivateZone,ResourceRecordSetCount,Config.Comment]" --output table
aws route53 list-hosted-zones-by-name --query "HostedZones[?contain(Name,'qa.com')].Id"
aws route53 list-vpc-association-authorizations --hosted-zone-id $HOSTED_ZONE_ID
aws s3 cp $FILE s3://$BUCKET/$KEY --sse aws:kms --sse-kms-key-id $KMS_ARN
aws s3 ls s3://S3_BUCKET/KEY --profile PROFILE --recursive --summarize --human-readable
aws s3 mb s3://BUCKET_NAME
aws s3 mv s3://S3_BUCKET/KEY/FILE s3://S3_BUCKET/KEY/FILE --sse aws:kms --sse-kms-key-id KMS_KEY_ID --profile PROFILE
aws s3 rb s3://BUCKET_NAME --force # remove bucket and all of it's contents
aws s3 rm s3://S3_BUCKET/KEY --recursive --profile PROFILE  # CAUTION!!!!
aws s3 sync --exclude "**/.git/*" --exclude "**/node_modules/*" --exclude "**/.terraform/*" SOME_DIR s3://S3_BUCKET/KEY/SOME_DIR
aws s3 sync --profile AWS_PROFILE --exclude \* --include DIR_NAME\* s3://BUCKET_SRC/path/to/files/ s3://BUCKET_DEST/path/to/files/
aws s3 sync --profile AWS_PROFILE s3://BUCKET_SRC/ /BUCKET_DEST/dir/
aws s3api get-bucket-notification-configuration --bucket BUCKET
aws s3api get-bucket-policy --bucket BUCKET | jq '.Policy | fromjson'
aws s3api list-buckets --query Owner.ID --output text  # canonical ID
aws secretsmanager get-secret-value --secret-id NAME --query SecretString --output text | jq .
aws ses --region REGION get-identity-verification-attributes --identities EMAIL_ADDR
aws ses --region REGION list-identities [--identity-type EmailAddress|Domain]
aws ses --region REGION verify-email-identity --email-address EMAIL_ADDR
aws sns --region REGION list-endpoints-by-platform-application --platform-application-arn ARN
aws sns --region REGION list-platform-applications | grep REGEX # get the ARN
aws sns create-topic --name "TOPIC_NAME" | jq -r .TopicArn
aws sns delete-topic --topic-arn NOTIFICATION_ARN
aws sns list-subscriptions
aws sns list-topics | grep "TOPIC_NAME" | cut -d '"' -f4 # get SNS notification ARN
aws sns subscribe --topic-arn ARN --protocol email --notification-endpoint END_POINT
aws ssm delete-association --association-id $ASSOC_ID
aws ssm delete-association --instance-id $INST_ID
aws ssm get-parameter --name /aws/service/ami-windows-latest/Windows_Server-2012-R2_RTM-English-64Bit-Base
aws ssm get-parameter --name /aws/service/ecs/optimized-ami/amazon-linux/recommended --with-decryption
aws ssm put-parameter --name KEY_NAME --value PASSWD --type SecureString --overwrite
aws ssm start-session --target INSTANCE_ID
aws sts get-caller-identity
aws sts get-session-token --serial-number arn-of-the-mfa-device --token-code code-from-token
aws_acct=$(aws ec2 describe-security-groups --query SecurityGroups[0].OwnerId --output text); echo $aws_acct  # get AWS account
aws_acct=$(aws sts get-caller-identity --query Account --output text); echo $aws_acct  # get AWS account
aws_acct=$(aws sts get-caller-identity | jq -r .Account); echo $aws_acct               # get AWS account
curl http://169.254.169.254/latest/meta-data/; echo
curl http://169.254.169.254/latest/meta-data/identity-credentials/ec2/security-credentials/ec2-instance/; echo
echo -e "protocol=https\npath=/v1/repos/test\nhost=git-codecommit.us-east-1.amazonaws.com" | aws codecommit credential-helper get  # set up HTTPS access
eval $(aws ecr get-login --registry-ids $AWS_ACCT --region $REGION | sed 's/-e none //')  # aws (v1.11.13)
for asgn in $(aws autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName | cut -d'"' -f4); do echo $asgn ; aws autoscaling resume-processes --region REGION --auto-scaling-group-name $asgn; done"
for asgn in $(aws autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName | cut -d'"' -f4); do echo $asgn ; aws autoscaling suspend-processes --region REGION --auto-scaling-group-name $asgn; done"
sam deploy --template-file SAM_TEMPLATE.yaml --stack-name STACK_NAME --capabilities CAPABILITY_IAM --tags Key1=Val1 Key2=Val2 --parameter-overrides Key1=Val1 Key2=Val2
sam local generate-event SERVICE EVENT
sam local invoke FUNCTION
sam local start-api
sam local start-lambda
sam logs -n RESOURCE_ID --stack-name STACK_NAME --tail
sam package --template-file TEMPLATE.yaml --output-template-file SAM_TEMPLATE.yaml --s3-bucket BUCKET --s3-prefix KEY
sam validate
wget http://169.254.169.254/latest/user-data
